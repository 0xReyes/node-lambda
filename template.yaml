AWSTemplateFormatVersion: '2010-09-09'
Description: Direct Lambda deployment without S3

Resources:
  NodeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  NodeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: node-lambda
      Handler: index.handler
      Role: !GetAtt NodeLambdaRole.Arn
      Runtime: nodejs18.x
      Code:
        ZipFile: |
          exports.handler = async () => {
            return { statusCode: 200, body: \"Placeholder\" };
          };

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: NodeLambdaApi
      ProtocolType: HTTP

  LambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NodeLambdaFunction.Arn}/invocations
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'

  ApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'ANY /{proxy+}'
      Target: !Join [ '/', [ 'integrations', !Ref LambdaIntegration ] ]

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: prod
      AutoDeploy: true

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NodeLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*
